@page "/answers"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject HttpClient Http
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Questions</PageTitle>

<h1>Questions</h1>

@if (isTeacher)
{
    <div>
        <label for="userDropdown">Select a user:</label>
        <select id="userDropdown" @onchange="OnUserChanged">
            <option value="" disabled selected>Select a user</option>
            @foreach (var user in userList)
            {
                <option value="@user.id">@user.name</option>
            }
        </select>
    </div>
}
else
{
    <p>You are a student. Your ID: @currentUserId</p>
}

@if (selectedUserId != 0 || !isTeacher)
{
    <div>
        <label for="answerDropdown">Select a question:</label>
        <select id="answerDropdown" @bind="SelectedAnswerId">
            <option value="0" disabled>Select a question</option>
            @foreach (var questionGroup in userAnswers.GroupBy(a => a.questionID))
            {
                <option value="@questionGroup.Key">@questionGroup.First().questionTitle</option>
            }
        </select>
    </div>
}

@if (SelectedAnswerId != 0 && selectedQuestion != null)
{
    <h3>Question: @selectedQuestion.questionTitle</h3>
    <p>@selectedQuestion.questionText</p>
    <h4>Answers:</h4>
    var selectedAnswers = userAnswers.Where(a => a.questionID == SelectedAnswerId).ToList();
    @foreach (var answer in selectedAnswers)
    {
        <div>
            <p><strong>Answer ID: @answer.questionID</strong></p>
            <pre>@((MarkupString)FormatAnswer(answer.content))</pre>
        </div>
    }
}

@code {
    private List<enhancedUserClass> userList = new();
    private List<returnAnswerClass> userAnswers = new();
    private int selectedUserId = 0;
    private int selectedAnswerId = 0;
    private int currentUserId;
    private questionClass selectedQuestion = null;
    private string name = string.Empty;
    private string email = string.Empty;
    private bool isTeacher;

    // Property for two-way binding with answer dropdown
    private int SelectedAnswerId
    {
        get => selectedAnswerId;
        set
        {
            if (selectedAnswerId != value)
            {
                selectedAnswerId = value;
                _ = LoadQuestionDetails(selectedAnswerId); // Async call
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var userClaims = HttpContextAccessor.HttpContext?.User?.Claims;
        if (userClaims != null)
        {
            var emailClaim = userClaims.FirstOrDefault(c => c.Type == ClaimTypes.Email);
            if (emailClaim != null)
            {
                email = emailClaim.Value;
            }

            var nameClaim = userClaims.FirstOrDefault(c => c.Type == ClaimTypes.GivenName);
            if (nameClaim != null)
            {
                name = nameClaim.Value;
            }
        }

        userList = await Http.GetFromJsonAsync<List<enhancedUserClass>>("/users");

        var currentUser = userList.FirstOrDefault(u => u.email == email);
        if (currentUser != null)
        {
            isTeacher = currentUser.teacher;
            currentUserId = currentUser.id;
        }

        if (!isTeacher)
        {
            userAnswers = await Http.GetFromJsonAsync<List<returnAnswerClass>>($"/answers/{currentUserId}");
            StateHasChanged();
        }
    }

    private async Task OnUserChanged(ChangeEventArgs e)
    {
        selectedUserId = int.Parse(e.Value?.ToString() ?? "0");

        if (selectedUserId != 0)
        {
            SelectedAnswerId = 0; // Reset dropdown
            selectedQuestion = null;

            userAnswers = await Http.GetFromJsonAsync<List<returnAnswerClass>>($"/answers/{selectedUserId}");
            StateHasChanged();
        }
    }

    private async Task LoadQuestionDetails(int questionId)
    {
        if (questionId != 0)
        {
            selectedQuestion = await Http.GetFromJsonAsync<questionClass>($"/questions/0/{questionId}");
            StateHasChanged();
        }
    }

    private string FormatAnswer(string input)
    {
        return input.Replace("\n", "<br />");
    }

    class enhancedUserClass
    {
        public string name { get; set; }
        public string email { get; set; }
        public int id { get; set; }
        public bool teacher { get; set; }
    }

    class returnAnswerClass
    {
        public int questionID { get; set; }
        public string questionTitle { get; set; }
        public string content { get; set; }
    }

    class questionClass
    {
        public int questionID { get; set; }
        public string? questionTitle { get; set; }
        public string? questionText { get; set; }
        public string? startCode { get; set; }
        public string? programTest { get; set; }
        public string? solution { get; set; }
    }
}
