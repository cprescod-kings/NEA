@page "/answers"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject HttpClient Http
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Questions</PageTitle>

<h1>Questions</h1>

@if (isTeacher)
{
    <div>
        <label for="userDropdown">Select a user:</label>
        <select id="userDropdown" @onchange="OnUserChanged">
            <option value="">Select a user</option>
            @foreach (var user in userList)
            {
                <option value="@user.id">@user.name</option>
            }
        </select>
    </div>

    @if (selectedUserId != 0 && userAnswers.Count > 0)
    {
        <div>
            <label for="answerDropdown">Select a question:</label>
            <select id="answerDropdown" @bind="selectedAnswerId">
                <option value="">Select a question</option>
                @foreach (var questionGroup in userAnswers.GroupBy(a => a.questionID))
                {
                    <option value="@questionGroup.Key">@questionGroup.First().questionTitle</option>
                }
            </select>
        </div>
    }

    @if (selectedAnswerId != 0)
    {
        var selectedAnswers = userAnswers.Where(a => a.questionID == selectedAnswerId).ToList();
        <h3>Answers for "@selectedAnswers.First().questionTitle"</h3>
        @foreach (var answer in selectedAnswers)
        {
            <div>
                <p><strong>Answer:</strong></p>
                <p>@answer.content</p>
            </div>
        }
    }
}
else
{
    <p>You are not a teacher. Your ID: @currentUserId</p>
}

@code {
    private questionClass question;
    private List<enhancedUserClass> userList = new List<enhancedUserClass>();
    private List<returnAnswerClass> userAnswers = new List<returnAnswerClass>();
    private int selectedUserId = 0;  // User selected from the first dropdown
    private int selectedAnswerId = 0;  // Answer selected from the second dropdown
    private string name = string.Empty;
    private string email = string.Empty;
    private bool isTeacher;
    private int currentUserId;  // Store the current user's ID

    protected async override Task OnInitializedAsync()
    {
        // Get current user claims
        var userClaims = HttpContextAccessor.HttpContext?.User?.Claims;
        if (userClaims != null)
        {
            var emailClaim = userClaims.FirstOrDefault(c => c.Type == ClaimTypes.Email);
            if (emailClaim != null)
            {
                email = emailClaim.Value;
            }
            var nameClaim = userClaims.FirstOrDefault(c => c.Type == ClaimTypes.GivenName);
            if (nameClaim != null)
            {
                name = nameClaim.Value;
            }
        }

        // Fetch the user list
        userList = await Http.GetFromJsonAsync<List<enhancedUserClass>>("/users");

        // Check if the current user is a teacher
        var currentUser = userList.FirstOrDefault(u => u.email == email);
        if (currentUser != null)
        {
            isTeacher = currentUser.teacher; // Set flag if current user is a teacher
            currentUserId = currentUser.id; // Set current user's ID
        }
    }

    // Handle user change event and fetch their answers
    private async Task OnUserChanged(ChangeEventArgs e)
    {
        selectedUserId = int.Parse(e.Value.ToString());  // Get selected user ID from the event
        if (selectedUserId != 0)
        {
            // Fetch the answers for the selected user
            userAnswers = await Http.GetFromJsonAsync<List<returnAnswerClass>>($"/answers/{selectedUserId}");
            selectedAnswerId = 0; // Reset the second dropdown when user changes
            StateHasChanged(); // Manually trigger re-rendering
        }
    }

    // Class definitions for User, Answer, and Answer Return
    class enhancedUserClass
    {
        public string name { get; set; }
        public string email { get; set; }
        public int id { get; set; }
        public bool teacher { get; set; }
    }

    class returnAnswerClass
    {
        public int questionID { get; set; }
        public string questionTitle { get; set; }
        public string content { get; set; }
    }
    class questionClass
    {
        public int questionID { get; set; }
        public string? questionTitle { get; set; }
        public string? questionText { get; set; }
        public string? startCode { get; set; }
        public string? programTest { get; set; }
        public string? solution { get; set; }
    }
}
